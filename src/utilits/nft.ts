import { Metaplex, walletAdapterIdentity } from "@metaplex-foundation/js";
import type { WalletAdapter } from "@solana/wallet-adapter-base";
import { PublicKey } from "@solana/web3.js";
import { connection } from "./connection";
import type { MintMetadata, NFT, FetchedCertificateMetadata } from "../types";

const ISSUER_TAG = "MyCertApp"; // –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –º—ñ—Ç–∫–∞ –≤–∞—à–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
export async function mintCertificate(wallet: WalletAdapter, metadata: MintMetadata): Promise<NFT> {
  const metaplex = Metaplex.make(connection).use(walletAdapterIdentity(wallet));

  const { nft } = await metaplex.nfts().create({
    uri: metadata.uri, // URL –Ω–∞ JSON –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
    name: metadata.name,
    symbol: metadata.symbol,
    sellerFeeBasisPoints: 0,
    maxSupply: 1,
  });

  return {
    address: nft.address.toBase58(),
    metadata,
  };
}

// –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
export async function verifyCertificate(mintAddress: string): Promise<FetchedCertificateMetadata> {
  const metaplex = Metaplex.make(connection);
  const mintPubKey = new PublicKey(mintAddress);

  const nftObject = await metaplex.nfts().findByMint({ mintAddress: mintPubKey });

  let metadata = nftObject.json;

  // –Ø–∫—â–æ –º–µ—Ç–∞–¥–∞–Ω—ñ —â–µ –Ω–µ –±—É–ª–∏ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ
  if (!metadata) {
    const response = await fetch(nftObject.uri);
    metadata = await response.json();
  }

  // –ó–∞–º—ñ–Ω—é—î–º–æ IPFS URI –Ω–∞ HTTP –ø–æ—Å–∏–ª–∞–Ω–Ω—è
  if (metadata.image?.startsWith("ipfs://")) {
    metadata.image = metadata.image.replace("ipfs://", "https://gateway.pinata.cloud/ipfs/");
  }

  // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏
  const isValidCertificate = metadata.attributes && Array.isArray(metadata.attributes) && metadata.attributes.some((attr: any) => attr.trait_type === "issuer" && attr.value === ISSUER_TAG);

  if (!isValidCertificate) {
    throw new Error("–¶–µ–π NFT –Ω–µ —î –¥—ñ–π—Å–Ω–∏–º —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–æ–º, –≤–∏–¥–∞–Ω–∏–º –Ω–∞—à–æ—é —Å–∏—Å—Ç–µ–º–æ—é.");
  }

  return metadata as FetchedCertificateMetadata;
}
